#include<iostream>
using namespace std;

class node {
    public: 
    int data;
    node* left ;
    node* right ;

    node(int data) {
        this->data = data;
        left = right = NULL;
    }
};

node* insert(node* root , int data) {
    if (root == NULL ) {
        return new node(data);
    }
    if (data > root->data) {
        root->right = insert(root->right , data);
    }
    else if (data < root->data) {
        root->left = insert(root->left , data);
    }
    return root ;
}

node* buildBST(node* root,int data) {
    return insert(root , data);
}


bool searchInBST(node* root , int key) {
    if (root == NULL ) {
        return false;
    }
    if (root->data == key) {
        return true;
    }
    else if(root->data > key ) {
        return searchInBST(root->left , key);
    }
    else {
        return searchInBST(root->right , key);
    }
    return false;
}

int main() {
    int arr[7] = {6,3,5,7,10,9,1};
    node* root = NULL;

    for (int i=0 ; i<7 ; i++) {
    root = buildBST(root , arr[i]); 
}

cout<<searchInBST(root , 10)<<endl;

return 0;

}
